// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_users is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "main/internal/models"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetIdByLogin mocks base method
func (m *MockUserRepository) GetIdByLogin(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdByLogin", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdByLogin indicates an expected call of GetIdByLogin
func (mr *MockUserRepositoryMockRecorder) GetIdByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetIdByLogin), arg0)
}

// GetUserDataByLogin mocks base method
func (m *MockUserRepository) GetUserDataByLogin(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByLogin", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByLogin indicates an expected call of GetUserDataByLogin
func (mr *MockUserRepositoryMockRecorder) GetUserDataByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetUserDataByLogin), arg0)
}

// GetUserDataById mocks base method
func (m *MockUserRepository) GetUserDataById(arg0 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataById", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataById indicates an expected call of GetUserDataById
func (mr *MockUserRepositoryMockRecorder) GetUserDataById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataById", reflect.TypeOf((*MockUserRepository)(nil).GetUserDataById), arg0)
}

// GetUserProfileSettingsByLogin mocks base method
func (m *MockUserRepository) GetUserProfileSettingsByLogin(arg0 string) (models.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileSettingsByLogin", arg0)
	ret0, _ := ret[0].(models.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileSettingsByLogin indicates an expected call of GetUserProfileSettingsByLogin
func (mr *MockUserRepositoryMockRecorder) GetUserProfileSettingsByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileSettingsByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetUserProfileSettingsByLogin), arg0)
}

// GetUserProfileSettingsById mocks base method
func (m *MockUserRepository) GetUserProfileSettingsById(arg0 int) (models.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileSettingsById", arg0)
	ret0, _ := ret[0].(models.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileSettingsById indicates an expected call of GetUserProfileSettingsById
func (mr *MockUserRepositoryMockRecorder) GetUserProfileSettingsById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileSettingsById", reflect.TypeOf((*MockUserRepository)(nil).GetUserProfileSettingsById), arg0)
}

// UploadSettings mocks base method
func (m *MockUserRepository) UploadSettings(arg0 int, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSettings indicates an expected call of UploadSettings
func (mr *MockUserRepositoryMockRecorder) UploadSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSettings", reflect.TypeOf((*MockUserRepository)(nil).UploadSettings), arg0, arg1)
}

// UploadProfilePhoto mocks base method
func (m *MockUserRepository) UploadProfilePhoto(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfilePhoto", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProfilePhoto indicates an expected call of UploadProfilePhoto
func (mr *MockUserRepositoryMockRecorder) UploadProfilePhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfilePhoto", reflect.TypeOf((*MockUserRepository)(nil).UploadProfilePhoto), arg0)
}

// GetIdByEmail mocks base method
func (m *MockUserRepository) GetIdByEmail(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdByEmail", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdByEmail indicates an expected call of GetIdByEmail
func (mr *MockUserRepositoryMockRecorder) GetIdByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetIdByEmail), arg0)
}

// GetPassword mocks base method
func (m *MockUserRepository) GetPassword(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword
func (mr *MockUserRepositoryMockRecorder) GetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockUserRepository)(nil).GetPassword), arg0)
}

// GetDefaultProfilePhotoId mocks base method
func (m *MockUserRepository) GetDefaultProfilePhotoId() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultProfilePhotoId")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultProfilePhotoId indicates an expected call of GetDefaultProfilePhotoId
func (mr *MockUserRepositoryMockRecorder) GetDefaultProfilePhotoId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultProfilePhotoId", reflect.TypeOf((*MockUserRepository)(nil).GetDefaultProfilePhotoId))
}

// IsUserExist mocks base method
func (m *MockUserRepository) IsUserExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist
func (mr *MockUserRepositoryMockRecorder) IsUserExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockUserRepository)(nil).IsUserExist), arg0)
}

// GetUserLoginById mocks base method
func (m *MockUserRepository) GetUserLoginById(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginById", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginById indicates an expected call of GetUserLoginById
func (mr *MockUserRepositoryMockRecorder) GetUserLoginById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginById", reflect.TypeOf((*MockUserRepository)(nil).GetUserLoginById), arg0)
}

// AddNewUser mocks base method
func (m *MockUserRepository) AddNewUser(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser
func (mr *MockUserRepositoryMockRecorder) AddNewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockUserRepository)(nil).AddNewUser), arg0)
}

// SearchUsers mocks base method
func (m *MockUserRepository) SearchUsers(arg0 int, arg1, arg2 string) ([]models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers
func (mr *MockUserRepositoryMockRecorder) SearchUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserRepository)(nil).SearchUsers), arg0, arg1, arg2)
}
