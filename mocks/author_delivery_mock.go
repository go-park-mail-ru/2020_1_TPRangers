// Code generated by MockGen. DO NOT EDIT.
// Source: sessions.pb.go

// Package mock_session is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	session "main/internal/microservices/authorization/delivery"
	reflect "reflect"
)

// MockSessionCheckerClient is a mock of SessionCheckerClient interface
type MockSessionCheckerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionCheckerClientMockRecorder
}

// MockSessionCheckerClientMockRecorder is the mock recorder for MockSessionCheckerClient
type MockSessionCheckerClientMockRecorder struct {
	mock *MockSessionCheckerClient
}

// NewMockSessionCheckerClient creates a new mock instance
func NewMockSessionCheckerClient(ctrl *gomock.Controller) *MockSessionCheckerClient {
	mock := &MockSessionCheckerClient{ctrl: ctrl}
	mock.recorder = &MockSessionCheckerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionCheckerClient) EXPECT() *MockSessionCheckerClientMockRecorder {
	return m.recorder
}

// LoginUser mocks base method
func (m *MockSessionCheckerClient) LoginUser(ctx context.Context, in *session.Auth, opts ...grpc.CallOption) (*session.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginUser", varargs...)
	ret0, _ := ret[0].(*session.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser
func (mr *MockSessionCheckerClientMockRecorder) LoginUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockSessionCheckerClient)(nil).LoginUser), varargs...)
}

// CreateNewUser mocks base method
func (m *MockSessionCheckerClient) CreateNewUser(ctx context.Context, in *session.Register, opts ...grpc.CallOption) (*session.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNewUser", varargs...)
	ret0, _ := ret[0].(*session.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockSessionCheckerClientMockRecorder) CreateNewUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockSessionCheckerClient)(nil).CreateNewUser), varargs...)
}

// CheckSession mocks base method
func (m *MockSessionCheckerClient) CheckSession(ctx context.Context, in *session.SessionData, opts ...grpc.CallOption) (*session.UserId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckSession", varargs...)
	ret0, _ := ret[0].(*session.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession
func (mr *MockSessionCheckerClientMockRecorder) CheckSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSessionCheckerClient)(nil).CheckSession), varargs...)
}

// DeleteSession mocks base method
func (m *MockSessionCheckerClient) DeleteSession(ctx context.Context, in *session.SessionData, opts ...grpc.CallOption) (*session.UserId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSession", varargs...)
	ret0, _ := ret[0].(*session.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockSessionCheckerClientMockRecorder) DeleteSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionCheckerClient)(nil).DeleteSession), varargs...)
}

// MockSessionCheckerServer is a mock of SessionCheckerServer interface
type MockSessionCheckerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionCheckerServerMockRecorder
}

// MockSessionCheckerServerMockRecorder is the mock recorder for MockSessionCheckerServer
type MockSessionCheckerServerMockRecorder struct {
	mock *MockSessionCheckerServer
}

// NewMockSessionCheckerServer creates a new mock instance
func NewMockSessionCheckerServer(ctrl *gomock.Controller) *MockSessionCheckerServer {
	mock := &MockSessionCheckerServer{ctrl: ctrl}
	mock.recorder = &MockSessionCheckerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionCheckerServer) EXPECT() *MockSessionCheckerServerMockRecorder {
	return m.recorder
}

// LoginUser mocks base method
func (m *MockSessionCheckerServer) LoginUser(arg0 context.Context, arg1 *session.Auth) (*session.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*session.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser
func (mr *MockSessionCheckerServerMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockSessionCheckerServer)(nil).LoginUser), arg0, arg1)
}

// CreateNewUser mocks base method
func (m *MockSessionCheckerServer) CreateNewUser(arg0 context.Context, arg1 *session.Register) (*session.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", arg0, arg1)
	ret0, _ := ret[0].(*session.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockSessionCheckerServerMockRecorder) CreateNewUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockSessionCheckerServer)(nil).CreateNewUser), arg0, arg1)
}

// CheckSession mocks base method
func (m *MockSessionCheckerServer) CheckSession(arg0 context.Context, arg1 *session.SessionData) (*session.UserId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSession", arg0, arg1)
	ret0, _ := ret[0].(*session.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSession indicates an expected call of CheckSession
func (mr *MockSessionCheckerServerMockRecorder) CheckSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSession", reflect.TypeOf((*MockSessionCheckerServer)(nil).CheckSession), arg0, arg1)
}

// DeleteSession mocks base method
func (m *MockSessionCheckerServer) DeleteSession(arg0 context.Context, arg1 *session.SessionData) (*session.UserId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(*session.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockSessionCheckerServerMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionCheckerServer)(nil).DeleteSession), arg0, arg1)
}
