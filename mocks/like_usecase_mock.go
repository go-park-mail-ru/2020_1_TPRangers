// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/like (interfaces: UseCaseLike)

// Package mock_like is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCaseLike is a mock of UseCaseLike interface
type MockUseCaseLike struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseLikeMockRecorder
}

// MockUseCaseLikeMockRecorder is the mock recorder for MockUseCaseLike
type MockUseCaseLikeMockRecorder struct {
	mock *MockUseCaseLike
}

// NewMockUseCaseLike creates a new mock instance
func NewMockUseCaseLike(ctrl *gomock.Controller) *MockUseCaseLike {
	mock := &MockUseCaseLike{ctrl: ctrl}
	mock.recorder = &MockUseCaseLikeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCaseLike) EXPECT() *MockUseCaseLikeMockRecorder {
	return m.recorder
}

// DislikeComment mocks base method
func (m *MockUseCaseLike) DislikeComment(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikeComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikeComment indicates an expected call of DislikeComment
func (mr *MockUseCaseLikeMockRecorder) DislikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikeComment", reflect.TypeOf((*MockUseCaseLike)(nil).DislikeComment), arg0, arg1)
}

// DislikePhoto mocks base method
func (m *MockUseCaseLike) DislikePhoto(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikePhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikePhoto indicates an expected call of DislikePhoto
func (mr *MockUseCaseLikeMockRecorder) DislikePhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikePhoto", reflect.TypeOf((*MockUseCaseLike)(nil).DislikePhoto), arg0, arg1)
}

// DislikePost mocks base method
func (m *MockUseCaseLike) DislikePost(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikePost indicates an expected call of DislikePost
func (mr *MockUseCaseLikeMockRecorder) DislikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikePost", reflect.TypeOf((*MockUseCaseLike)(nil).DislikePost), arg0, arg1)
}

// LikeComment mocks base method
func (m *MockUseCaseLike) LikeComment(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeComment indicates an expected call of LikeComment
func (mr *MockUseCaseLikeMockRecorder) LikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockUseCaseLike)(nil).LikeComment), arg0, arg1)
}

// LikePhoto mocks base method
func (m *MockUseCaseLike) LikePhoto(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePhoto", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePhoto indicates an expected call of LikePhoto
func (mr *MockUseCaseLikeMockRecorder) LikePhoto(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePhoto", reflect.TypeOf((*MockUseCaseLike)(nil).LikePhoto), arg0, arg1)
}

// LikePost mocks base method
func (m *MockUseCaseLike) LikePost(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePost indicates an expected call of LikePost
func (mr *MockUseCaseLikeMockRecorder) LikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockUseCaseLike)(nil).LikePost), arg0, arg1)
}
