// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/feeds (interfaces: FeedUseCase)

// Package mock_feeds is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "main/internal/models"
	reflect "reflect"
)

// MockFeedUseCase is a mock of FeedUseCase interface
type MockFeedUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFeedUseCaseMockRecorder
}

// MockFeedUseCaseMockRecorder is the mock recorder for MockFeedUseCase
type MockFeedUseCaseMockRecorder struct {
	mock *MockFeedUseCase
}

// NewMockFeedUseCase creates a new mock instance
func NewMockFeedUseCase(ctrl *gomock.Controller) *MockFeedUseCase {
	mock := &MockFeedUseCase{ctrl: ctrl}
	mock.recorder = &MockFeedUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeedUseCase) EXPECT() *MockFeedUseCaseMockRecorder {
	return m.recorder
}

// CreateComment mocks base method
func (m *MockFeedUseCase) CreateComment(arg0 int, arg1 models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockFeedUseCaseMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockFeedUseCase)(nil).CreateComment), arg0, arg1)
}

// CreatePost mocks base method
func (m *MockFeedUseCase) CreatePost(arg0 int, arg1 string, arg2 models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockFeedUseCaseMockRecorder) CreatePost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockFeedUseCase)(nil).CreatePost), arg0, arg1, arg2)
}

// DeleteComment mocks base method
func (m *MockFeedUseCase) DeleteComment(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockFeedUseCaseMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockFeedUseCase)(nil).DeleteComment), arg0, arg1)
}

// Feed mocks base method
func (m *MockFeedUseCase) Feed(arg0 int) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed", arg0)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed
func (mr *MockFeedUseCaseMockRecorder) Feed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockFeedUseCase)(nil).Feed), arg0)
}

// GetPostAndComments mocks base method
func (m *MockFeedUseCase) GetPostAndComments(arg0 int, arg1 string) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostAndComments", arg0, arg1)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostAndComments indicates an expected call of GetPostAndComments
func (mr *MockFeedUseCaseMockRecorder) GetPostAndComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostAndComments", reflect.TypeOf((*MockFeedUseCase)(nil).GetPostAndComments), arg0, arg1)
}
