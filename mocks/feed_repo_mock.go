// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_feeds is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "main/internal/models"
	reflect "reflect"
)

// MockFeedRepository is a mock of FeedRepository interface
type MockFeedRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeedRepositoryMockRecorder
}

// MockFeedRepositoryMockRecorder is the mock recorder for MockFeedRepository
type MockFeedRepositoryMockRecorder struct {
	mock *MockFeedRepository
}

// NewMockFeedRepository creates a new mock instance
func NewMockFeedRepository(ctrl *gomock.Controller) *MockFeedRepository {
	mock := &MockFeedRepository{ctrl: ctrl}
	mock.recorder = &MockFeedRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFeedRepository) EXPECT() *MockFeedRepositoryMockRecorder {
	return m.recorder
}

// GetUserFeedById mocks base method
func (m *MockFeedRepository) GetUserFeedById(arg0, arg1 int) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFeedById", arg0, arg1)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFeedById indicates an expected call of GetUserFeedById
func (mr *MockFeedRepositoryMockRecorder) GetUserFeedById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFeedById", reflect.TypeOf((*MockFeedRepository)(nil).GetUserFeedById), arg0, arg1)
}

// GetUserPostsById mocks base method
func (m *MockFeedRepository) GetUserPostsById(arg0 int) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPostsById", arg0)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPostsById indicates an expected call of GetUserPostsById
func (mr *MockFeedRepositoryMockRecorder) GetUserPostsById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPostsById", reflect.TypeOf((*MockFeedRepository)(nil).GetUserPostsById), arg0)
}

// GetUserPostsByLogin mocks base method
func (m *MockFeedRepository) GetUserPostsByLogin(arg0 string) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPostsByLogin", arg0)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPostsByLogin indicates an expected call of GetUserPostsByLogin
func (mr *MockFeedRepositoryMockRecorder) GetUserPostsByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPostsByLogin", reflect.TypeOf((*MockFeedRepository)(nil).GetUserPostsByLogin), arg0)
}

// CreatePost mocks base method
func (m *MockFeedRepository) CreatePost(arg0 int, arg1 string, arg2 models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockFeedRepositoryMockRecorder) CreatePost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockFeedRepository)(nil).CreatePost), arg0, arg1, arg2)
}

// CreateComment mocks base method
func (m *MockFeedRepository) CreateComment(arg0 int, arg1 models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockFeedRepositoryMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockFeedRepository)(nil).CreateComment), arg0, arg1)
}

// DeleteComment mocks base method
func (m *MockFeedRepository) DeleteComment(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockFeedRepositoryMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockFeedRepository)(nil).DeleteComment), arg0, arg1)
}

// GetPostAndComments mocks base method
func (m *MockFeedRepository) GetPostAndComments(arg0 int, arg1 string) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostAndComments", arg0, arg1)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostAndComments indicates an expected call of GetPostAndComments
func (mr *MockFeedRepositoryMockRecorder) GetPostAndComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostAndComments", reflect.TypeOf((*MockFeedRepository)(nil).GetPostAndComments), arg0, arg1)
}

// GetPostsOfOtherUserWhileLogged mocks base method
func (m *MockFeedRepository) GetPostsOfOtherUserWhileLogged(arg0 string, arg1 int) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsOfOtherUserWhileLogged", arg0, arg1)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsOfOtherUserWhileLogged indicates an expected call of GetPostsOfOtherUserWhileLogged
func (mr *MockFeedRepositoryMockRecorder) GetPostsOfOtherUserWhileLogged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsOfOtherUserWhileLogged", reflect.TypeOf((*MockFeedRepository)(nil).GetPostsOfOtherUserWhileLogged), arg0, arg1)
}
