// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/users (interfaces: UserUseCase)

// Package mock_users is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "main/internal/models"
	reflect "reflect"
)

// MockUserUseCase is a mock of UserUseCase interface
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// CheckFriendship mocks base method
func (m *MockUserUseCase) CheckFriendship(arg0 int, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFriendship", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFriendship indicates an expected call of CheckFriendship
func (mr *MockUserUseCaseMockRecorder) CheckFriendship(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFriendship", reflect.TypeOf((*MockUserUseCase)(nil).CheckFriendship), arg0, arg1)
}

// GetMainUserProfile mocks base method
func (m *MockUserUseCase) GetMainUserProfile(arg0 int) (models.MainUserProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainUserProfile", arg0)
	ret0, _ := ret[0].(models.MainUserProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainUserProfile indicates an expected call of GetMainUserProfile
func (mr *MockUserUseCaseMockRecorder) GetMainUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainUserProfile", reflect.TypeOf((*MockUserUseCase)(nil).GetMainUserProfile), arg0)
}

// GetOtherUserProfileNotLogged mocks base method
func (m *MockUserUseCase) GetOtherUserProfileNotLogged(arg0 string) (models.OtherUserProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherUserProfileNotLogged", arg0)
	ret0, _ := ret[0].(models.OtherUserProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherUserProfileNotLogged indicates an expected call of GetOtherUserProfileNotLogged
func (mr *MockUserUseCaseMockRecorder) GetOtherUserProfileNotLogged(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherUserProfileNotLogged", reflect.TypeOf((*MockUserUseCase)(nil).GetOtherUserProfileNotLogged), arg0)
}

// GetSettings mocks base method
func (m *MockUserUseCase) GetSettings(arg0 int) (models.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0)
	ret0, _ := ret[0].(models.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings
func (mr *MockUserUseCaseMockRecorder) GetSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockUserUseCase)(nil).GetSettings), arg0)
}

// GetUserLoginByCookie mocks base method
func (m *MockUserUseCase) GetUserLoginByCookie(arg0 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginByCookie", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginByCookie indicates an expected call of GetUserLoginByCookie
func (mr *MockUserUseCaseMockRecorder) GetUserLoginByCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginByCookie", reflect.TypeOf((*MockUserUseCase)(nil).GetUserLoginByCookie), arg0)
}

// GetUserProfileWhileLogged mocks base method
func (m *MockUserUseCase) GetUserProfileWhileLogged(arg0 string, arg1 int) (models.OtherUserProfileData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileWhileLogged", arg0, arg1)
	ret0, _ := ret[0].(models.OtherUserProfileData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileWhileLogged indicates an expected call of GetUserProfileWhileLogged
func (mr *MockUserUseCaseMockRecorder) GetUserProfileWhileLogged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileWhileLogged", reflect.TypeOf((*MockUserUseCase)(nil).GetUserProfileWhileLogged), arg0, arg1)
}

// Login mocks base method
func (m *MockUserUseCase) Login(arg0 models.Auth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserUseCaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUseCase)(nil).Login), arg0)
}

// Logout mocks base method
func (m *MockUserUseCase) Logout(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockUserUseCaseMockRecorder) Logout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserUseCase)(nil).Logout), arg0)
}

// Register mocks base method
func (m *MockUserUseCase) Register(arg0 models.Register) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUserUseCaseMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUseCase)(nil).Register), arg0)
}

// SearchUsers mocks base method
func (m *MockUserUseCase) SearchUsers(arg0 int, arg1 string) ([]models.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1)
	ret0, _ := ret[0].([]models.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers
func (mr *MockUserUseCaseMockRecorder) SearchUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserUseCase)(nil).SearchUsers), arg0, arg1)
}

// UploadSettings mocks base method
func (m *MockUserUseCase) UploadSettings(arg0 int, arg1 models.Settings) (models.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSettings", arg0, arg1)
	ret0, _ := ret[0].(models.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSettings indicates an expected call of UploadSettings
func (mr *MockUserUseCaseMockRecorder) UploadSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSettings", reflect.TypeOf((*MockUserUseCase)(nil).UploadSettings), arg0, arg1)
}
