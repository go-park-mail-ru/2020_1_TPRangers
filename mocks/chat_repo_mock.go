// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/chats (interfaces: ChatRepository)

// Package mock_chats is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "main/internal/models"
	reflect "reflect"
)

// MockChatRepository is a mock of ChatRepository interface
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// CreateNewChat mocks base method
func (m *MockChatRepository) CreateNewChat(arg0, arg1 string, arg2 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewChat", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewChat indicates an expected call of CreateNewChat
func (mr *MockChatRepositoryMockRecorder) CreateNewChat(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewChat", reflect.TypeOf((*MockChatRepository)(nil).CreateNewChat), arg0, arg1, arg2)
}

// ExitChat mocks base method
func (m *MockChatRepository) ExitChat(arg0 int64, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitChat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExitChat indicates an expected call of ExitChat
func (mr *MockChatRepositoryMockRecorder) ExitChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitChat", reflect.TypeOf((*MockChatRepository)(nil).ExitChat), arg0, arg1)
}

// GetAllChats mocks base method
func (m *MockChatRepository) GetAllChats(arg0 int) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChats", arg0)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChats indicates an expected call of GetAllChats
func (mr *MockChatRepositoryMockRecorder) GetAllChats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChats", reflect.TypeOf((*MockChatRepository)(nil).GetAllChats), arg0)
}

// GetGroupChatMessages mocks base method
func (m *MockChatRepository) GetGroupChatMessages(arg0 int64, arg1 int) (models.ChatInfo, []models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupChatMessages", arg0, arg1)
	ret0, _ := ret[0].(models.ChatInfo)
	ret1, _ := ret[1].([]models.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupChatMessages indicates an expected call of GetGroupChatMessages
func (mr *MockChatRepositoryMockRecorder) GetGroupChatMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupChatMessages", reflect.TypeOf((*MockChatRepository)(nil).GetGroupChatMessages), arg0, arg1)
}

// GetPrivateChatMessages mocks base method
func (m *MockChatRepository) GetPrivateChatMessages(arg0 int64, arg1 int) (models.ChatInfo, []models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateChatMessages", arg0, arg1)
	ret0, _ := ret[0].(models.ChatInfo)
	ret1, _ := ret[1].([]models.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateChatMessages indicates an expected call of GetPrivateChatMessages
func (mr *MockChatRepositoryMockRecorder) GetPrivateChatMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateChatMessages", reflect.TypeOf((*MockChatRepository)(nil).GetPrivateChatMessages), arg0, arg1)
}
