package mock

// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/groups (interfaces: GroupUseCase)

// Package mock_groups is a generated GoMock package.


import (
gomock "github.com/golang/mock/gomock"
models "main/internal/models"
reflect "reflect"
)

// MockGroupUseCase is a mock of GroupUseCase interface
type MockGroupUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupUseCaseMockRecorder
}

// MockGroupUseCaseMockRecorder is the mock recorder for MockGroupUseCase
type MockGroupUseCaseMockRecorder struct {
	mock *MockGroupUseCase
}

// NewMockGroupUseCase creates a new mock instance
func NewMockGroupUseCase(ctrl *gomock.Controller) *MockGroupUseCase {
	mock := &MockGroupUseCase{ctrl: ctrl}
	mock.recorder = &MockGroupUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupUseCase) EXPECT() *MockGroupUseCaseMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method
func (m *MockGroupUseCase) CreateGroup(arg0 int, arg1 models.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockGroupUseCaseMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupUseCase)(nil).CreateGroup), arg0, arg1)
}

// CreatePostInGroup mocks base method
func (m *MockGroupUseCase) CreatePostInGroup(arg0, arg1 int, arg2 models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePostInGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePostInGroup indicates an expected call of CreatePostInGroup
func (mr *MockGroupUseCaseMockRecorder) CreatePostInGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePostInGroup", reflect.TypeOf((*MockGroupUseCase)(nil).CreatePostInGroup), arg0, arg1, arg2)
}

// GetGroupFeeds mocks base method
func (m *MockGroupUseCase) GetGroupFeeds(arg0, arg1 int) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupFeeds", arg0, arg1)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupFeeds indicates an expected call of GetGroupFeeds
func (mr *MockGroupUseCaseMockRecorder) GetGroupFeeds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupFeeds", reflect.TypeOf((*MockGroupUseCase)(nil).GetGroupFeeds), arg0, arg1)
}

// GetGroupProfile mocks base method
func (m *MockGroupUseCase) GetGroupProfile(arg0, arg1 int) (models.GroupProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupProfile", arg0, arg1)
	ret0, _ := ret[0].(models.GroupProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupProfile indicates an expected call of GetGroupProfile
func (mr *MockGroupUseCaseMockRecorder) GetGroupProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupProfile", reflect.TypeOf((*MockGroupUseCase)(nil).GetGroupProfile), arg0, arg1)
}

// GetUserGroupsList mocks base method
func (m *MockGroupUseCase) GetUserGroupsList(arg0 int) ([]models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroupsList", arg0)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroupsList indicates an expected call of GetUserGroupsList
func (mr *MockGroupUseCaseMockRecorder) GetUserGroupsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroupsList", reflect.TypeOf((*MockGroupUseCase)(nil).GetUserGroupsList), arg0)
}

// JoinTheGroup mocks base method
func (m *MockGroupUseCase) JoinTheGroup(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinTheGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinTheGroup indicates an expected call of JoinTheGroup
func (mr *MockGroupUseCaseMockRecorder) JoinTheGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinTheGroup", reflect.TypeOf((*MockGroupUseCase)(nil).JoinTheGroup), arg0, arg1)
}

// LeaveTheGroup mocks base method
func (m *MockGroupUseCase) LeaveTheGroup(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveTheGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveTheGroup indicates an expected call of LeaveTheGroup
func (mr *MockGroupUseCaseMockRecorder) LeaveTheGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveTheGroup", reflect.TypeOf((*MockGroupUseCase)(nil).LeaveTheGroup), arg0, arg1)
}

// SearchAllGroups mocks base method
func (m *MockGroupUseCase) SearchAllGroups(arg0 int, arg1 string) ([]models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllGroups", arg0, arg1)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockGroupUseCaseMockRecorder) SearchAllGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllGroups", reflect.TypeOf((*MockGroupUseCase)(nil).SearchAllGroups), arg0, arg1)
}
