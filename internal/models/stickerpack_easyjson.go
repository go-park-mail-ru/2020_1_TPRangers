// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6bc4b324DecodeMainInternalModels(in *jlexer.Lexer, out *StickerPack) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "packId":
			if in.IsNull() {
				in.Skip()
				out.PackId = nil
			} else {
				if out.PackId == nil {
					out.PackId = new(int64)
				}
				*out.PackId = int64(in.Int64())
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(string)
				}
				*out.Author = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "readme":
			if in.IsNull() {
				in.Skip()
				out.Readme = nil
			} else {
				if out.Readme == nil {
					out.Readme = new(string)
				}
				*out.Readme = string(in.String())
			}
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]Sticker, 0, 2)
					} else {
						out.Stickers = []Sticker{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Sticker
					(v1).UnmarshalEasyJSON(in)
					out.Stickers = append(out.Stickers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "owned":
			out.Owned = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6bc4b324EncodeMainInternalModels(out *jwriter.Writer, in StickerPack) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"packId\":"
		out.RawString(prefix[1:])
		if in.PackId == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.PackId))
		}
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(*in.Author))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(*in.Name))
	}
	if in.Readme != nil {
		const prefix string = ",\"readme\":"
		out.RawString(prefix)
		out.String(string(*in.Readme))
	}
	if len(in.Stickers) != 0 {
		const prefix string = ",\"stickers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Stickers {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"owned\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owned))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerPack) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6bc4b324EncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerPack) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6bc4b324EncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerPack) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6bc4b324DecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerPack) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6bc4b324DecodeMainInternalModels(l, v)
}
