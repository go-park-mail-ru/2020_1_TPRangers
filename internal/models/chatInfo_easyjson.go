// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5be0e96aDecodeMainInternalModels(in *jlexer.Lexer, out *ChatInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isGroupChat":
			out.IsGroupChat = bool(in.Bool())
		case "chatId":
			out.ChatId = string(in.String())
		case "chatCounter":
			out.ChatCounter = int(in.Int())
		case "statusOnline":
			out.StatusOnline = bool(in.Bool())
		case "privateName":
			out.PrivateName = string(in.String())
		case "privateSurname":
			out.PrivateSurname = string(in.String())
		case "privateUrl":
			out.PrivateUrl = string(in.String())
		case "chatName":
			out.ChatName = string(in.String())
		case "chatPhoto":
			out.ChatPhoto = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5be0e96aEncodeMainInternalModels(out *jwriter.Writer, in ChatInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isGroupChat\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsGroupChat))
	}
	{
		const prefix string = ",\"chatId\":"
		out.RawString(prefix)
		out.String(string(in.ChatId))
	}
	{
		const prefix string = ",\"chatCounter\":"
		out.RawString(prefix)
		out.Int(int(in.ChatCounter))
	}
	{
		const prefix string = ",\"statusOnline\":"
		out.RawString(prefix)
		out.Bool(bool(in.StatusOnline))
	}
	{
		const prefix string = ",\"privateName\":"
		out.RawString(prefix)
		out.String(string(in.PrivateName))
	}
	{
		const prefix string = ",\"privateSurname\":"
		out.RawString(prefix)
		out.String(string(in.PrivateSurname))
	}
	{
		const prefix string = ",\"privateUrl\":"
		out.RawString(prefix)
		out.String(string(in.PrivateUrl))
	}
	{
		const prefix string = ",\"chatName\":"
		out.RawString(prefix)
		out.String(string(in.ChatName))
	}
	{
		const prefix string = ",\"chatPhoto\":"
		out.RawString(prefix)
		out.String(string(in.ChatPhoto))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5be0e96aEncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5be0e96aEncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5be0e96aDecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5be0e96aDecodeMainInternalModels(l, v)
}
