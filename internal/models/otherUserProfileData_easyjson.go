// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5cadb1eDecodeMainInternalModels(in *jlexer.Lexer, out *OtherUserProfileData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "feed":
			if in.IsNull() {
				in.Skip()
				out.Feed = nil
			} else {
				in.Delim('[')
				if out.Feed == nil {
					if !in.IsDelim(']') {
						out.Feed = make([]Post, 0, 1)
					} else {
						out.Feed = []Post{}
					}
				} else {
					out.Feed = (out.Feed)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Post
					easyjson5cadb1eDecodeMainInternalModels1(in, &v1)
					out.Feed = append(out.Feed, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			easyjson5cadb1eDecodeMainInternalModels2(in, &out.User)
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]FriendLandingInfo, 0, 1)
					} else {
						out.Friends = []FriendLandingInfo{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v2 FriendLandingInfo
					easyjson5cadb1eDecodeMainInternalModels3(in, &v2)
					out.Friends = append(out.Friends, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "isFriends":
			out.IsFriends = bool(in.Bool())
		case "isMe":
			out.IsMe = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5cadb1eEncodeMainInternalModels(out *jwriter.Writer, in OtherUserProfileData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Feed) != 0 {
		const prefix string = ",\"feed\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v3, v4 := range in.Feed {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson5cadb1eEncodeMainInternalModels1(out, v4)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson5cadb1eEncodeMainInternalModels2(out, in.User)
	}
	if len(in.Friends) != 0 {
		const prefix string = ",\"friends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Friends {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson5cadb1eEncodeMainInternalModels3(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"isFriends\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsFriends))
	}
	{
		const prefix string = ",\"isMe\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMe))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherUserProfileData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5cadb1eEncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherUserProfileData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5cadb1eEncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherUserProfileData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5cadb1eDecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherUserProfileData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5cadb1eDecodeMainInternalModels(l, v)
}
func easyjson5cadb1eDecodeMainInternalModels3(in *jlexer.Lexer, out *FriendLandingInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "avatar":
			out.Photo = string(in.String())
		case "url":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5cadb1eEncodeMainInternalModels3(out *jwriter.Writer, in FriendLandingInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Surname != "" {
		const prefix string = ",\"surname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Surname))
	}
	if in.Photo != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo))
	}
	if in.Login != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	out.RawByte('}')
}
func easyjson5cadb1eDecodeMainInternalModels2(in *jlexer.Lexer, out *Settings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "telephone":
			out.Telephone = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "photo":
			out.Photo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5cadb1eEncodeMainInternalModels2(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Login != "" {
		const prefix string = ",\"login\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	if in.Telephone != "" {
		const prefix string = ",\"telephone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Telephone))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Surname != "" {
		const prefix string = ",\"surname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Surname))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Photo != "" {
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Photo))
	}
	out.RawByte('}')
}
func easyjson5cadb1eDecodeMainInternalModels1(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "photo":
			easyjson5cadb1eDecodeMainInternalModels4(in, &out.Photo)
		case "attachments":
			out.Attachments = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "wasLike":
			out.WasLike = bool(in.Bool())
		case "date":
			out.Creation = string(in.String())
		case "authorName":
			out.AuthorName = string(in.String())
		case "authorSurname":
			out.AuthorSurname = string(in.String())
		case "authorUrl":
			out.AuthorUrl = string(in.String())
		case "authorPhoto":
			out.AuthorPhoto = string(in.String())
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 1)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Comment
					(v7).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5cadb1eEncodeMainInternalModels1(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if true {
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson5cadb1eEncodeMainInternalModels4(out, in.Photo)
	}
	if in.Attachments != "" {
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Attachments))
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"wasLike\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasLike))
	}
	if in.Creation != "" {
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Creation))
	}
	if in.AuthorName != "" {
		const prefix string = ",\"authorName\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	if in.AuthorSurname != "" {
		const prefix string = ",\"authorSurname\":"
		out.RawString(prefix)
		out.String(string(in.AuthorSurname))
	}
	if in.AuthorUrl != "" {
		const prefix string = ",\"authorUrl\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUrl))
	}
	if in.AuthorPhoto != "" {
		const prefix string = ",\"authorPhoto\":"
		out.RawString(prefix)
		out.String(string(in.AuthorPhoto))
	}
	if len(in.Comments) != 0 {
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.Comments {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson5cadb1eDecodeMainInternalModels4(in *jlexer.Lexer, out *Photo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(int)
				}
				*out.Id = int(in.Int())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				if out.Likes == nil {
					out.Likes = new(int)
				}
				*out.Likes = int(in.Int())
			}
		case "wasLike":
			out.WasLike = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5cadb1eEncodeMainInternalModels4(out *jwriter.Writer, in Photo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"Id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(*in.Id))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Likes == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Likes))
		}
	}
	{
		const prefix string = ",\"wasLike\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasLike))
	}
	out.RawByte('}')
}
