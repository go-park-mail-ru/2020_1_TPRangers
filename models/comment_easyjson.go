// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeMainInternalModels(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "comment_id":
			out.CommentID = string(in.String())
		case "post_id":
			out.PostID = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "photo":
			easyjsonE9abebc9DecodeMainInternalModels1(in, &out.Photo)
		case "attachments":
			out.Attachments = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "wasLike":
			out.WasLike = bool(in.Bool())
		case "date":
			out.Creation = string(in.String())
		case "authorName":
			out.AuthorName = string(in.String())
		case "authorSurname":
			out.AuthorSurname = string(in.String())
		case "authorUrl":
			out.AuthorUrl = string(in.String())
		case "authorPhoto":
			out.AuthorPhoto = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeMainInternalModels(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CommentID != "" {
		const prefix string = ",\"comment_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CommentID))
	}
	if in.PostID != "" {
		const prefix string = ",\"post_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PostID))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"photo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonE9abebc9EncodeMainInternalModels1(out, in.Photo)
	}
	if in.Attachments != "" {
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		out.String(string(in.Attachments))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"wasLike\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasLike))
	}
	if in.Creation != "" {
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Creation))
	}
	if in.AuthorName != "" {
		const prefix string = ",\"authorName\":"
		out.RawString(prefix)
		out.String(string(in.AuthorName))
	}
	if in.AuthorSurname != "" {
		const prefix string = ",\"authorSurname\":"
		out.RawString(prefix)
		out.String(string(in.AuthorSurname))
	}
	if in.AuthorUrl != "" {
		const prefix string = ",\"authorUrl\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUrl))
	}
	if in.AuthorPhoto != "" {
		const prefix string = ",\"authorPhoto\":"
		out.RawString(prefix)
		out.String(string(in.AuthorPhoto))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeMainInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeMainInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeMainInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeMainInternalModels(l, v)
}
func easyjsonE9abebc9DecodeMainInternalModels1(in *jlexer.Lexer, out *Photo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				if out.Id == nil {
					out.Id = new(int)
				}
				*out.Id = int(in.Int())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.Url = nil
			} else {
				if out.Url == nil {
					out.Url = new(string)
				}
				*out.Url = string(in.String())
			}
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				if out.Likes == nil {
					out.Likes = new(int)
				}
				*out.Likes = int(in.Int())
			}
		case "wasLike":
			out.WasLike = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeMainInternalModels1(out *jwriter.Writer, in Photo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != nil {
		const prefix string = ",\"Id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(*in.Id))
	}
	if in.Url != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Url))
	}
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Likes == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Likes))
		}
	}
	{
		const prefix string = ",\"wasLike\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasLike))
	}
	out.RawByte('}')
}
